using System.Collections.Generic;
using System.Linq;

namespace CodeFirstApi.Generator;

internal static class CodeFirstApiGenerator_HttpControllerApi
{
    internal static IEnumerable<(string text, string path)> Generate(OneWayAppInfo info)
    {
        var namespaces = new []
            {
                "System",
                "System.Collections.Generic",
                "System.Threading.Tasks",
                "System.Buffers",
                "System.IO",
                "Microsoft.AspNetCore.Mvc",
                "System.Net.Http",
            }
            .Concat(info.NamespacesToInclude)
            .Distinct();
        
        var sb = new IndentedStringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("");
        sb.AppendLines(namespaces.Select(o => $"using {o};"));
        sb.AppendLine($"namespace {info.app.Namespace}");
        using (sb.IndentWithCurlyBrackets())
        {
            sb.AppendLine();
            if (info.authorizationInfo != null)
            {
                sb.AppendLine($"[Microsoft.AspNetCore.Authorization.Authorize(Policy={info.authorizationInfo.policy ?? "null"}, Roles={info.authorizationInfo.roles ?? "null"}, AuthenticationSchemes={info.authorizationInfo.authenticationSchemes?? "null"})]");
            }
            sb.AppendLine("[ApiController]");
            sb.AppendLine($"public partial class {info.app.TypeNameWithoutIPrefix}_Controller: ControllerBase");
            using (sb.IndentWithCurlyBrackets())
            {
                sb.AppendLine($"private {info.app.FullName} _service;");

                sb.AppendLine();
                sb.AppendLine($"public {info.app.TypeNameWithoutIPrefix}_Controller([FromKeyedServices(\"GeneratedController\")]{info.app.FullName} service)");
                using (sb.IndentWithCurlyBrackets())
                {
                    sb.AppendLine("_service = service;");
                }
                
                foreach (var (m, i) in info.methods.EnumerateWithIndex())
                {
                    sb.AppendLine($"[HttpPost(\"/api/{info.app.TypeNameWithoutIPrefix}/{m.name}\")]");
                    if (m.authorizationInfo != null)
                    {
                        sb.AppendLine($"[Microsoft.AspNetCore.Authorization.Authorize(Policy={m.authorizationInfo.policy ?? "null"}, Roles={m.authorizationInfo.roles ?? "null"}, AuthenticationSchemes={m.authorizationInfo.authenticationSchemes?? "null"})]");
                    }

                    string arguments;
                    string serviceArgs;
                    if (m.arguments.Length == 0)
                    {
                        arguments = "";
                        serviceArgs="";
                    }
                    else if (m.arguments.Length == 1)
                    {
                        arguments = $"[FromBody]{m.arguments[0].argType.FullName} {m.arguments[0].argName}";
                        serviceArgs=m.arguments[0].argName;
                    }
                    else
                    {
                        
                        arguments = $"[FromBody]{m.name}_Request request";
                        serviceArgs=$"{m.arguments.Select(a=>$"request.{a.argName}").JoinStringWithComma()}";;
                    }
                    sb.AppendLine($"public async ValueTask{m.returnType?.FullName.WrapWithAngleBrackets()} {m.name}({arguments})");
                    using (sb.IndentWithCurlyBrackets())
                    {            
                        sb.AppendLine($"{(m.returnType==null?"":"var response = ")}await _service.{m.name}({serviceArgs});");
                        if (m.returnType != null)
                        {
                            sb.AppendLine($"return response;");
                        }
                    }
                }
                
                
                foreach (var (m, i) in info.methods.EnumerateWithIndex())
                {
                    if (m.arguments.Length == 0)
                    {
                        continue;
                    }
                    else if (m.arguments.Length == 1)
                    {
                        continue;
                    }
                    else
                    {
                        sb.AppendLine($"public record {m.name}_Request({m.arguments.Select(a=>$"{a.argType.FullName} {a.argName}").JoinStringWithComma()});");
                    }
                }
            }
        }

        yield return ($"{info.app.TypeNameWithoutIPrefix}_Controller.g.cs", sb.ToString());


        namespaces = namespaces.Concat(["Microsoft.AspNetCore.Components"]).Distinct();

        var anyAuthMethods = info.methods.Any(o => o.authorizationInfo != null) || info.authorizationInfo != null;;
        sb = new IndentedStringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("");
        sb.AppendLines(namespaces.Select(o => $"using {o};"));
        sb.AppendLine($"namespace {info.app.Namespace}");
        using (sb.IndentWithCurlyBrackets())
        {
            sb.AppendLine();
            sb.AppendLine($"public partial class {info.app.TypeNameWithoutIPrefix}_ProtectedWrapper: {info.app.FullName}, IDisposable");
            using (sb.IndentWithCurlyBrackets())
            {
                sb.AppendLine($"private readonly {info.app.FullName} _service;");
                sb.AppendLine($"private readonly PersistentComponentState _applicationState;");
                sb.AppendLine($"private readonly List<IDisposable> _persistingSubscriptions = new List<IDisposable>();");
                if (anyAuthMethods)
                {
                    sb.AppendLine(
                        $"private CodeFirstApi.Core.IAttributeAuthorizationService _attributeAuthorizationService;");
                }

                sb.AppendLine();
                sb.AppendLine($"public {info.app.TypeNameWithoutIPrefix}_ProtectedWrapper([FromKeyedServices(\"GeneratedController\")]{info.app.FullName} service, PersistentComponentState applicationState{(anyAuthMethods?", CodeFirstApi.Core.IAttributeAuthorizationService attributeAuthorizationService":"")})");
                using (sb.IndentWithCurlyBrackets())
                {
                    sb.AppendLine("_service = service;");
                    sb.AppendLine("_applicationState = applicationState;");
                    if (anyAuthMethods)
                    {
                        sb.AppendLine("_attributeAuthorizationService = attributeAuthorizationService;");
                    }
                    
                }
                
                foreach (var (m, i) in info.methods.EnumerateWithIndex())
                {
                    var methodPersistence = m.returnType != null && m.persistForPrerendering;
                    sb.AppendLine($"public async ValueTask{m.returnType?.FullName.WrapWithAngleBrackets()} {m.name}({m.arguments.Select(a=>$"{a.argType.FullName} {a.argName}").JoinStringWithComma()})");
                    using (sb.IndentWithCurlyBrackets())
                    {
                        if (info.authorizationInfo != null)
                        {
                            sb.AppendLine($"await _attributeAuthorizationService.ValidateAsync({info.authorizationInfo.policy?? "null"}, {info.authorizationInfo.roles?? "null"}, {info.authorizationInfo.authenticationSchemes?? "null"});");
                        }
                        
                        string? argCsharp = null;
                        if (m.arguments.Length == 0)
                        {
                            argCsharp = null;
                        }
                        else if (m.arguments.Length == 1)
                        {
                            argCsharp = m.arguments[0].argName;
                        }
                        else
                        {
                            argCsharp = $"new {{ {m.arguments.Select(a=>$"{a.argName}").JoinStringWithComma()} }}";
                        }
                        
                        if (methodPersistence)
                        {
                            if (argCsharp != null)
                            {
                                sb.AppendLine($"var persistenceKey=$\"{m.name}_{{JsonSerializer.Serialize({argCsharp})}}\";");
                            }
                            else
                            {
                                sb.AppendLine($"var persistenceKey=$\"{m.name}\";");
                            }
                            sb.AppendLine($"if (_applicationState.TryTakeFromJson<{m.returnType.FullName}>(persistenceKey, out var __restoredValue))");
                            using (sb.IndentWithCurlyBrackets())
                            {
                                sb.AppendLine("return __restoredValue;");
                            }
                        }
                        
                        if (m.authorizationInfo != null)
                        {
                            sb.AppendLine($"await _attributeAuthorizationService.ValidateAsync({m.authorizationInfo.policy?? "null"}, {m.authorizationInfo.roles?? "null"}, {m.authorizationInfo.authenticationSchemes?? "null"});");
                        }
                        if (m.returnType != null)
                        {
                            sb.AppendLine($"var response = await _service.{m.name}({m.arguments.Select(a=>$"{a.argName}").JoinStringWithComma()});");
                            
                            
                            if (methodPersistence)
                            {
                                sb.AppendLine($"_persistingSubscriptions.Add(_applicationState.RegisterOnPersisting(async () => ");
                                using (sb.IndentWithCurlyBrackets())
                                {
                                    sb.AppendLine("_applicationState.PersistAsJson(persistenceKey, response);");
                                }
                                sb.AppendLine($", Microsoft.AspNetCore.Components.Web.RenderMode.InteractiveAuto));");
                            }
                            
                            sb.AppendLine("return response;");
                        }
                        else
                        { 
                            sb.AppendLine($"_service.{m.name}({m.arguments.Select(a=>$"{a.argName}").JoinStringWithComma()});");
                        }
                    }
                }
                
                sb.AppendLine("void IDisposable.Dispose()");
                using (sb.IndentWithCurlyBrackets())
                {
                    sb.AppendLine($"foreach (var subscription in _persistingSubscriptions)");
                    using (sb.IndentWithCurlyBrackets())
                    {
                        sb.AppendLine("subscription.Dispose();");
                    }
                    sb.AppendLine("_persistingSubscriptions.Clear();");
                }
            }
        }

        yield return ($"{info.app.TypeNameWithoutIPrefix}_ProtectedWrapper.g.cs", sb.ToString());
    }
    internal static IEnumerable<(string text, string path)> GenerateServicesMethod(IEnumerable<OneWayAppInfo> infos)
    {
        var namespaces = new []
            {
                "System",
                "System.Collections.Generic",
                "System.Threading.Tasks",
                "System.Buffers",
                "System.IO",
                "System.Text.Json",
                "System.Net.Http",
                "System.Net.Http.Json",
                "Microsoft.Extensions.DependencyInjection.Extensions"
            }
            .Concat(infos.SelectMany(o=>o.NamespacesToInclude))
            .Distinct();
        
        var sb = new IndentedStringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("");
        sb.AppendLines(namespaces.Select(o => $"using {o};"));
 
        sb.AppendLine();
        sb.AppendLine($"internal static class GeneratedControllerExtensions ");
        using (sb.IndentWithCurlyBrackets())
        {
            sb.AppendLine($"public static void AddServicesWithGeneratedWrappers<TInterface, TImplementation>(this IServiceCollection services)");
            sb.AppendLine($"    where TImplementation : class, TInterface ");
            sb.AppendLine($"    where TInterface:class");
            sb.AppendLine($"");
            using (sb.IndentWithCurlyBrackets())
            {
                sb.AppendLine($"services.TryAddScoped<CodeFirstApi.Core.IAttributeAuthorizationService,CodeFirstApi.Core.AspNetDefaultAttributeAuthorizationService>();");
                foreach (var info in infos)
                {
                    sb.AppendLine($"if(typeof(TInterface) == typeof({info.app.FullName}))");
                    using (sb.IndentWithCurlyBrackets())
                    {
                        sb.AppendLine($"services.AddScoped(typeof({info.app.FullName}),typeof({info.app.TypeNameWithoutIPrefix}_ProtectedWrapper));");
                        sb.AppendLine($"services.AddKeyedScoped( typeof({info.app.FullName}),\"GeneratedController\",typeof(TImplementation));");
                    }
                    sb.AppendLine($"else");
                    using (sb.IndentWithCurlyBrackets())
                    {
                        sb.AppendLine($"throw new InvalidOperationException(\"TInterface must be generated!\");");
                    }
                }
            }
        }
        

        yield return ($"GeneratedControllerExtensions.g.cs", sb.ToString());
        
        
        yield return ($"AspNetDefaultAttributeAuthorizationService.cs", @"using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Components.Authorization;
using System.Security.Authentication;

namespace CodeFirstApi.Core;

public class AspNetDefaultAttributeAuthorizationService : IAttributeAuthorizationService
{
    private readonly IAuthorizationPolicyProvider _authorizationPolicyProvider;
    private readonly IAuthorizationService _authorizationService;
    private readonly AuthenticationStateProvider _authenticationStateProvider;

    public AspNetDefaultAttributeAuthorizationService(IAuthorizationPolicyProvider authorizationPolicyProvider, IAuthorizationService authorizationService, AuthenticationStateProvider authenticationStateProvider)
    {
        _authorizationPolicyProvider = authorizationPolicyProvider;
        _authorizationService = authorizationService;
        _authenticationStateProvider = authenticationStateProvider;
    }

    public async ValueTask ValidateAsync(string? policy, string? roles, string? authenticationSchemes)
    {
        var authorizeData = new AuthorizeDataAdapter(policy, roles, authenticationSchemes);

        var combinedPolicy = await AuthorizationPolicy.CombineAsync(_authorizationPolicyProvider, [authorizeData]);
        if (combinedPolicy == null)
        {
            throw new InvalidOperationException($""Could not combine policies!"");
        }

        var authenticationState = _authenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authenticationState.User;

        var result = await _authorizationService.AuthorizeAsync(user, null, combinedPolicy);
        if (!result.Succeeded)
        {
            throw new AuthenticationException();
        }
    }

    private class AuthorizeDataAdapter(string? policy, string? roles, string? authenticationSchemes) : IAuthorizeData
    {
        public string? Policy { get; set; } = policy;
        public string? Roles { get; set; } = roles;
        public string? AuthenticationSchemes { get; set; } = authenticationSchemes;
    }
}
");
        
    }

}